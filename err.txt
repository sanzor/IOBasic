
main.hs:13:29: error:
    * Couldn't match type `Text' with `IO [Char]'
      Expected type: Text -> IO [Char]
        Actual type: String -> Text
    * In the second argument of `(>>=)', namely `pack'
      In a stmt of a 'do' block: infile <- I.getLine >>= pack
      In the expression:
        do I.putStrLn (pack "Insert output path:")
           infile <- I.getLine >>= pack
           if not checkExt infile then
               I.putStrLn "Extension is wrong , try again" main
           else
               I.writeFile infile (pack . show $ db)
   |
13 |         infile<-I.getLine>>=T.pack 
   |                             ^^^^^^

main.hs:14:13: error:
    * Couldn't match expected type `[Char] -> Bool'
                  with actual type `Bool'
    * The function `not' is applied to two arguments,
      but its type `Bool -> Bool' has only one
      In the expression: not checkExt infile
      In a stmt of a 'do' block:
        if not checkExt infile then
            I.putStrLn "Extension is wrong , try again" main
        else
            I.writeFile infile (pack . show $ db)
   |
14 |         if  not checkExt infile then
   |             ^^^^^^^^^^^^^^^^^^^

main.hs:14:17: error:
    * Couldn't match expected type `Bool'
                  with actual type `Text -> Bool'
    * Probable cause: `checkExt' is applied to too few arguments
      In the first argument of `not', namely `checkExt'
      In the expression: not checkExt infile
      In a stmt of a 'do' block:
        if not checkExt infile then
            I.putStrLn "Extension is wrong , try again" main
        else
            I.writeFile infile (pack . show $ db)
   |
14 |         if  not checkExt infile then
   |                 ^^^^^^^^

main.hs:15:13: error:
    * Couldn't match expected type `IO () -> IO ()'
                  with actual type `IO ()'
    * The function `I.putStrLn' is applied to two arguments,
      but its type `Text -> IO ()' has only one
      In the expression: I.putStrLn "Extension is wrong , try again" main
      In a stmt of a 'do' block:
        if not checkExt infile then
            I.putStrLn "Extension is wrong , try again" main
        else
            I.writeFile infile (pack . show $ db)
   |
15 |             I.putStrLn "Extension is wrong , try again"
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

main.hs:15:24: error:
    * Couldn't match expected type `Text' with actual type `[Char]'
    * In the first argument of `I.putStrLn', namely
        `"Extension is wrong , try again"'
      In the expression: I.putStrLn "Extension is wrong , try again" main
      In a stmt of a 'do' block:
        if not checkExt infile then
            I.putStrLn "Extension is wrong , try again" main
        else
            I.writeFile infile (pack . show $ db)
   |
15 |             I.putStrLn "Extension is wrong , try again"
   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

main.hs:26:29: error:
    * Couldn't match expected type `Bool'
                  with actual type `Text -> Bool'
    * Probable cause: `checkExt' is applied to too few arguments
      In the expression: checkExt
      In the second argument of `(>>=)', namely
        `if checkExt then return else error (pack "could not be done")'
      In the expression:
        I.getLine
          >>= if checkExt then return else error (pack "could not be done")
   |
26 |     makeFile=I.getLine>>=if checkExt then return  else error (T.pack "could not be done")
   |                             ^^^^^^^^

main.hs:26:63: error:
    * Couldn't match expected type `[Char]' with actual type `Text'
    * In the first argument of `error', namely
        `(pack "could not be done")'
      In the expression: error (pack "could not be done")
      In the second argument of `(>>=)', namely
        `if checkExt then return else error (pack "could not be done")'
   |
26 |     makeFile=I.getLine>>=if checkExt then return  else error (T.pack "could not be done")
   |                                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^
