
Main.hs:13:20: error:
    * Couldn't match expected type `L.ByteString'
                  with actual type `[Char]'
    * In the first argument of `L.putStrLn', namely
        `"Insert output path:"'
      In a stmt of a 'do' block: L.putStrLn "Insert output path:"
      In the expression:
        do L.putStrLn "Insert output path:"
           infile <- C.getLine
           if not checkExt infile then
               L.putStrLn "Extension is wrong , try again" main
           else
               C.writeFile infile (C.pack . show $ db)
   |
13 |         L.putStrLn "Insert output path:"
   |                    ^^^^^^^^^^^^^^^^^^^^^

Main.hs:15:13: error:
    * Couldn't match expected type `C.ByteString -> Bool'
                  with actual type `Bool'
    * The function `not' is applied to two arguments,
      but its type `Bool -> Bool' has only one
      In the expression: not checkExt infile
      In a stmt of a 'do' block:
        if not checkExt infile then
            L.putStrLn "Extension is wrong , try again" main
        else
            C.writeFile infile (C.pack . show $ db)
   |
15 |         if  not checkExt infile then
   |             ^^^^^^^^^^^^^^^^^^^

Main.hs:15:17: error:
    * Couldn't match expected type `Bool'
                  with actual type `L.ByteString -> Bool'
    * Probable cause: `checkExt' is applied to too few arguments
      In the first argument of `not', namely `checkExt'
      In the expression: not checkExt infile
      In a stmt of a 'do' block:
        if not checkExt infile then
            L.putStrLn "Extension is wrong , try again" main
        else
            C.writeFile infile (C.pack . show $ db)
   |
15 |         if  not checkExt infile then
   |                 ^^^^^^^^

Main.hs:16:13: error:
    * Couldn't match expected type `IO () -> IO ()'
                  with actual type `IO ()'
    * The function `L.putStrLn' is applied to two arguments,
      but its type `L.ByteString -> IO ()' has only one
      In the expression: L.putStrLn "Extension is wrong , try again" main
      In a stmt of a 'do' block:
        if not checkExt infile then
            L.putStrLn "Extension is wrong , try again" main
        else
            C.writeFile infile (C.pack . show $ db)
   |
16 |             L.putStrLn "Extension is wrong , try again"
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

Main.hs:16:24: error:
    * Couldn't match expected type `L.ByteString'
                  with actual type `[Char]'
    * In the first argument of `L.putStrLn', namely
        `"Extension is wrong , try again"'
      In the expression: L.putStrLn "Extension is wrong , try again" main
      In a stmt of a 'do' block:
        if not checkExt infile then
            L.putStrLn "Extension is wrong , try again" main
        else
            C.writeFile infile (C.pack . show $ db)
   |
16 |             L.putStrLn "Extension is wrong , try again"
   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Main.hs:19:25: error:
    * Couldn't match type `C.ByteString' with `[Char]'
      Expected type: FilePath
        Actual type: C.ByteString
    * In the first argument of `C.writeFile', namely `infile'
      In the expression: C.writeFile infile (C.pack . show $ db)
      In a stmt of a 'do' block:
        if not checkExt infile then
            L.putStrLn "Extension is wrong , try again" main
        else
            C.writeFile infile (C.pack . show $ db)
   |
19 |             C.writeFile infile  (C.pack .show $ db)
   |                         ^^^^^^

Main.hs:27:14: error:
    * Couldn't match type `C.ByteString'
                     with `L.ByteString'
      NB: `L.ByteString' is defined in `Data.ByteString.Lazy.Internal'
          `C.ByteString' is defined in `Data.ByteString.Internal'
      Expected type: IO L.ByteString
        Actual type: IO C.ByteString
    * In the expression:
        C.getLine
          >>= if checkExt then return else error (C.pack "could not be done")
      In an equation for `makeFile':
          makeFile
            = C.getLine
                >>= if checkExt then return else error (C.pack "could not be done")
   |
27 |     makeFile=C.getLine>>=if checkExt then return  else error (C.pack "could not be done")
   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Main.hs:27:29: error:
    * Couldn't match expected type `Bool'
                  with actual type `L.ByteString -> Bool'
    * Probable cause: `checkExt' is applied to too few arguments
      In the expression: checkExt
      In the second argument of `(>>=)', namely
        `if checkExt then return else error (C.pack "could not be done")'
      In the expression:
        C.getLine
          >>= if checkExt then return else error (C.pack "could not be done")
   |
27 |     makeFile=C.getLine>>=if checkExt then return  else error (C.pack "could not be done")
   |                             ^^^^^^^^

Main.hs:27:63: error:
    * Couldn't match expected type `[Char]'
                  with actual type `C.ByteString'
    * In the first argument of `error', namely
        `(C.pack "could not be done")'
      In the expression: error (C.pack "could not be done")
      In the second argument of `(>>=)', namely
        `if checkExt then return else error (C.pack "could not be done")'
   |
27 |     makeFile=C.getLine>>=if checkExt then return  else error (C.pack "could not be done")
   |                                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^
